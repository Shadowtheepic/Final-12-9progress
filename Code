import pygame
pygame.init()  
pygame.display.set_caption("sprite sheet")  # sets the window title
screen = pygame.display.set_mode((800, 800))  # creates game screen
bg = pygame.image.load('bg.png')
clock = pygame.time.Clock() #set up clock
gameover = False #variable to run our game loop

#CONSTANTS
LEFT=0
RIGHT=1
UP = 2
DOWN = 3

A=4
D=5
W=6
S=7

#MAP: 1 is grass, 2 is brick
map = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0],
       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0 ,0 ,0, 0],
       [1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0 ,0 ,0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 ,1, 1]]


brick = pygame.image.load('brick.png') #load your spritesheet
dirt = pygame.image.load('dirt.png') #load your spritesheet
mahrio = pygame.image.load('balls.png').convert_alpha() #load your spritesheet
mahrio.set_colorkey((255,255,255)) #this makes bright pink (255, 0, 255) transparent (sort of)
sword = pygame.image.load('swordidle.png')
sword.set_colorkey((255,255,255))
swordl = pygame.image.load('swordidleft.png')
swordl.set_colorkey((255,255,255))
swing = pygame.image.load('sword.png')
swing.set_colorkey((255,255,255))
swingr = pygame.image.load('swordleft.png')
swingr.set_colorkey((255,255,255))

#player variables
xpos = 500 #xpos of player 1
ypos = 200 #ypos of player 1
xpos2 = 250
ypos2 = 200
vx = 0 #x velocity of player 1
vy = 0 #y velocity of player 1
vy2 = 0
vx2 = 0
keys = [False, False, False, False] #this list holds whether each key has been pressed
isOnGround = False #this variable stops gravity from pulling you down more when on a platform
counter=0
ticker = 0
face = 0
atk = False

#animation variables variables
frameWidth = 32
swordWidth = 50
frameHeight = 32
swordHeight = 50
frameWidth2 = 32
frameHeight2 = 32
RowNum = 1 #for left animation, this will need to change for other animations
RowNum2 = 5
frameNum = 0
swordNum = 0
frameNum2 = 0
ticker = 0
ticker2 = 0
direction = DOWN
direction = S

while not gameover:
    clock.tick(60) #FPS
   
   
    for event in pygame.event.get(): #quit game if x is pressed in top corner
        if event.type == pygame.QUIT:
            gameover = True
     
        if event.type == pygame.KEYDOWN: #keyboard input
            if event.key == pygame.K_LEFT:
                keys[LEFT]=True
                face = 1
            elif event.key == pygame.K_RIGHT:
                keys[RIGHT]=True
                face = 0
            elif event.key == pygame.K_UP:
                keys[UP]=True
            elif event.key == pygame.K_SPACE:
                keys[DOWN] = True
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                keys[LEFT]=False
            elif event.key == pygame.K_RIGHT:
                keys[RIGHT]=False
            elif event.key == pygame.K_UP:
                keys[UP]=False
            elif event.key == pygame.K_SPACE:
                keys[DOWN] = False
         


    #LEFT MOVEMENT
    if keys[LEFT]==True:
        vx=-3
        RowNum = 3
        direction = LEFT
    #RIGHT MOVEMENT
    elif keys[RIGHT] == True:
        vx = 3
        RowNum = 1
        direction = RIGHT
    #turn off velocity
    else:
        vx = 0
        #JUMPING
    if keys[UP] == True and isOnGround == True: #only jump when on the ground
        vy = -8
        RowNum = 8
        isOnGround = False
        direction = UP

    if keys[DOWN] == True:
        atk = True
    else:
        atk = False
   

    ##LEFT MOVEMENT
    #if keys[LEFT]==True:
    #    vx=-3
    #    RowNum = 0
    #    direction = LEFT
    ##RIGHT MOVEMENT
    #elif keys[RIGHT] == True:
    #    vx = 3
    #    RowNum = 1
    #    direction = RIGHT
    ##turn off velocity
    #else:
    #    vx = 0
    #    #JUMPING
    #if keys[UP] == True and isOnGround == True: #only jump when on the ground
    #    vy = -8
    #    RowNum = 2
    #    isOnGround = False
    #    direction = UP
   

    print(vx)
       
    xpos+=vx #update player xpos
    ypos+=vy
    #xpos2+=vx2
    #ypos2+=vy2
   
   
    #COLLISION
   
    #collision with feetsies
    if map[int((ypos+frameHeight)/50)][int((xpos+frameWidth/2)/50)]==1 or map[int((ypos+frameHeight)/50)][int((xpos+frameWidth/2)/50)]==2:
        isOnGround = True
        vy=0
       
    else:
        isOnGround = False

    #if map[int((ypos2+frameHeight2)/50)][int((xpos2+frameWidth2/2)/50)]==1 or map[int((ypos2+frameHeight2)/50)][int((xpos2+frameWidth2/2)/50)]==2:
    #    isOnGround2 = True
    #    vy2=0
       
    #else:
    #    isOnGround2 = False
       
    #bump your head, ouch!
    if map[int((ypos)/50)][int((xpos+frameWidth/2)/50)]==1 or map[int((ypos)/50)][int((xpos+frameWidth/2)/50)]==2:
        vy=0

    #if map[int((ypos2)/50)][int((xpos2+frameWidth2/2)/50)]==1 or map[int((ypos2)/50)][int((xpos2+frameWidth2/2)/50)]==2:
    #    vy2=0
       
    #left collision (it's extra long because we check both head and feets(well, knees) for left collision
    if (map[int((ypos+frameHeight-10)/50)][int((xpos-4)/50)]==1 or map[int((ypos)/50)][int((xpos-4)/50)]==1 or map[int((ypos+frameHeight-10)/50)][int((xpos-4)/50)]==2 or map[int((ypos)/50)][int((xpos-4)/50)]==2 ) and direction == LEFT:
        xpos+=3
     
    #if (map[int((ypos2+frameHeight2-10)/50)][int((xpos2-4)/50)]==1 or map[int((ypos2)/50)][int((xpos2-4)/50)]==1 or map[int((ypos2+frameHeight2-10)/50)][int((xpos2-4)/50)]==2 or map[int((ypos2)/50)][int((xpos2-4)/50)]==2 ) and direction == LEFT:
    #    xpos2+=3
    #right collision needed here
    if (map[int((ypos+frameHeight-10)/50)][int((xpos+frameWidth+5)/50)]==1 or map[int((ypos)/50)][int((xpos+frameWidth+5)/50)]==1 or map[int((ypos+frameHeight-10)/50)][int((xpos+frameWidth+5)/50)]==2 or map[int((ypos)/50)][int((xpos+frameWidth+5)/50)]==2 ) and direction == RIGHT:
        xpos-=3

    #if (map[int((ypos2+frameHeight2-10)/50)][int((xpos2+frameWidth2+5)/50)]==1 or map[int((ypos2)/50)][int((xpos2+frameWidth2+5)/50)]==1 or map[int((ypos2+frameHeight2-10)/50)][int((xpos2+frameWidth2+5)/50)]==2 or map[int((ypos2)/50)][int((xpos2+frameWidth2+5)/50)]==2 ) and direction == RIGHT:
    #    xpos2-=3

    #stop moving if you hit edge of screen (will be removed for scrolling)
    if xpos+frameWidth > 800:
        xpos-=3
    if xpos<0:
        xpos+=3

    #if xpos+frameWidth2 > 800:
    #    xpos2-=3
    #if xpos2<0:
    #    xpos2+=3

   
    #stop falling if on bottom of game screen
    if ypos > 800-frameHeight:
        isOnGround = True
        vy = 0
        ypos = 800-frameHeight

    #if ypos2 > 800-frameHeight2:
    #    isOnGround = True
    #    vy = 0
    #    ypos2 = 800-frameHeight2
   
    #gravity
    if isOnGround == False:
        vy+=.2 #notice this grows over time, aka ACCELERATION
   
    #if isOnGround2 == False:
    #    vy2+=.2
   

       
    #ANIMATION-------------------------------------------------------------------
       
    # Update Animation Information

    if vx != 0 or vy != 0: #animate when moving
        ticker+=1
        if ticker%10==0: #only change frames every 10 ticks
          frameNum+=1
        if keys[RIGHT] == True or keys[LEFT] == True:
            if frameNum>3:
                frameNum = 0
        else: 
            if frameNum>2:
                frameNum = 0
    if atk == True:
        ticker2 += 1
        if ticker2%10==0:
            swordNum+=1
        if swordNum > 1:
            swordNum = 0

 
    # RENDER--------------------------------------------------------------------------------
    # Once we've figured out what frame we're on and where we are, time to render.
           
    screen.fill((0,0,0)) #wipe screen so it doesn't smear
   
    #draw map
    screen.blit(bg,(0,0))

    for i in range (16):#16
        for j in range(16):#16
            if map[i][j]==1:
                screen.blit(dirt, (j*50, i*50), (0, 0, 50, 50))#50,50  0,0,50,50
            if map[i][j]==2:
                screen.blit(brick, (j*50, i*50), (0, 0, 50, 50))#50,50  0,0,50,50
    for i in range (10):#16
        for j in range(10):#16
            if map[i][j]==1:
                screen.blit(dirt, (j*80, i*80), (0, 0, 50, 50))#50,50  0,0,50,50
            if map[i][j]==2:
                screen.blit(brick, (j*80, i*80), (0, 0, 80, 80))#50,50  0,0,50,50
       

    screen.blit(mahrio, (xpos, ypos), (frameWidth*frameNum, RowNum*frameHeight, frameWidth, frameHeight))
    if atk == True and face == 1:
        screen.blit(swing,(xpos - swordWidth, ypos + 10), (swordWidth * swordNum, 0, swordWidth, swordHeight))
    elif atk == False and face == 1:
        screen.blit (sword, (xpos + swordWidth - 10, ypos + 10), (swordWidth * 0,0, swordWidth, swordHeight))
    if atk == True and face == 0:
        screen.blit(swingr,(xpos + swordWidth - 10, ypos + 10), (swordWidth * swordNum,0, swordWidth, swordHeight))
    elif atk == False and face == 0:
        screen.blit(swordl, (xpos - swordWidth, ypos + 10), (swordWidth * 0, 0, swordWidth, swordHeight))
    pygame.display.flip()#this actually puts the pixel on the screen
   
#end game loop------------------------------------------------------------------------------
pygame.quit()
